version: "3"
services:
  visual_mvc:
    container_name: visual_mvc
    image: requestsvisualizer
    ports:
      - "666:80"
    depends_on:
      - api1
      - api2
      - api3
      - gateway
  gateway:
    container_name: gateway
    image: gatewayapi
    ports:
      - "1162:80"
    depends_on:
      - api1
      - api2
      - api3

  api1:
    container_name: api1
    image: lab1api
    ports:
      - "6212:80"
    depends_on:
      - postgre
      - elastic-s
      - neo4j
  api3:
    container_name: api3
    image: lab3api
    ports:
      - "7741:80"
    depends_on:
      - postgre
      - elastic-s
      - neo4j

  api2:
    container_name: api2
    image: lab2api
    ports:
      - "9099:80"
    depends_on:
      - postgre
      - neo4j

  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:6.2.0
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://broker:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081

  schema-registry:
    image: confluentinc/cp-schema-registry:6.2.0
    container_name: schema-registry
    ports:
      - "8081:8081"
    depends_on:
      - zookeeper
      - broker
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "broker:29092"
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  kafka-connect:
    image: confluentinc/cp-kafka-connect-base:6.2.0
    container_name: kafka-connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "broker:29092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      #  ---------------
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/data/connect-jars
    volumes:
      - postgres:/opt/docker/db/data
      - $PWD/data:/data
    command:
      - bash
      - -c
      - |
        echo "Installing Connector"
        confluent-hub install --no-prompt debezium/debezium-connector-postgresql:2.2.1
        confluent-hub install --no-prompt neo4j/kafka-connect-neo4j:5.0.3
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &
        #
        sleep infinity

  ksqldb:
    image: confluentinc/ksqldb-server:0.21.0
    container_name: ksqldb
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: broker:29092
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQL_STREAMS_PRODUCER_MAX_BLOCK_MS: 9223372036854775807
      KSQL_KSQL_CONNECT_URL: http://kafka-connect:8083
      KSQL_KSQL_SERVICE_ID: confluent_rmoff_01
      KSQL_KSQL_HIDDEN_TOPICS: "^_.*"

  control-center:
    image: confluentinc/cp-enterprise-control-center:6.2.0
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "broker:29092"
      CONTROL_CENTER_CONNECT_CONNECT_CLUSTER: "kafka-connect:8083"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_KSQL_KSQLDB_URL: "http://ksqldb:8088"
      CONTROL_CENTER_KSQL_KSQLDB_ADVERTISED_URL: "http://localhost:8088"
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_COMMAND_TOPIC_REPLICATION: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_INTERNAL_TOPICS_REPLICATION: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1
      CONTROL_CENTER_STREAMS_CACHE_MAX_BYTES_BUFFERING: 104857600
    command:
      - bash
      - -c
      - |
        echo "Waiting two minutes for Kafka brokers to start and
              necessary topics to be available"
        sleep 120
        /etc/confluent/docker/run

  kafkacat:
    image: edenhill/kafkacat:1.6.0
    container_name: kafkacat
    entrypoint:
      - /bin/sh
      - -c
      - |
        apk add jq;
        while [ 1 -eq 1 ];do sleep 60;done

  postgre:
    container_name: postgre
    image: postgres:latest
    ports:
      - "10210:5432"
    environment:
      - POSTGRES_USER=fokypoky
      - POSTGRES_PASSWORD=toor
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: >
      -c wal_level=logical
      -c max_wal_senders=1
      -c max_replication_slots=1

  elastic-s:
    container_name: elastic-s
    image: elasticsearch:7.6.2
    environment:
      - discovery.type=single-node
    volumes:
      - elastic:/usr/share/elasticsearch/data
    ports:
      - "10103:9200"
      - "10102:9300"

  neo4j:
    container_name: neo4j
    image: neo4j:latest
    environment:
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4JLABS_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_whitelist=apoc.*
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
    ports:
      - "7474:7474"
      - "1933:7687"
    volumes:
      - neo4j:/data
      - neo4j-conf:/conf
      - neo4j-plugins:/plugins
  
  telegraf:
    container_name: telegraf
    image: telegraf:1.30.1
    volumes:
    # TODO: use $PWD
      - C:\Users\fokypoky\Documents\projects\ArchitectureServices\telegraf\telegraf.conf:/etc/telegraf/telegraf.conf
    depends_on:
      - broker
      - influxdb

  influxdb:
    container_name: influxdb
    image: influxdb:2.7.5
    volumes:
      - influx-db:/var/lib/influxdb2
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=university
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=admin
      - INFLUXDB_USER=telegraf
      - INFLUXDB_USER_PASSWORD=telegraf
      - INFLUXDB_HTTP_AUTH_ENABLED=true

  grafana:
    container_name: grafana
    image: grafana/grafana:main
    ports:
      - "3333:3000"
    depends_on:
      - influxdb
    volumes:
      - grafana:/var/lib/grafana

volumes:
  grafana:
    external: true
    name: grafana
  influx-db:
    external: true
    name: influx-db
  neo4j-conf:
    external: true
    name: neo4j-conf
  neo4j-plugins:
    external: true
    name: neo4j-plugins
  neo4j:
    external: true
    name: neo4j
  postgres:
    external: true
    name: postgres
  elastic:
    external: true
    name: elastic
  kafka-connect-1:
    external: true
    name: kafka-connect-1
  kafka-data:
    external: true
    name: kafka-data
  zookeeper-data:
    external: true
    name: zookeeper-data
