name: Neo4jSinkConnector
topics: pg.public.students
connector.class: streams.kafka.connect.sink.Neo4jSinkConnector
key.converter: org.apache.kafka.connect.storage.StringConverter
value.converter: org.apache.kafka.connect.json.JsonConverter
errors.tolerance: all
errors.log.enable: true
errors.log.include.messages: true
neo4j.batch.parallelize: false
neo4j.server.uri: bolt://neo4j:7687
neo4j.authentication.basic.username: neo4j
neo4j.authentication.basic.password: dr22042002
neo4j.topic.cypher.pg.public.students: CALL apoc.do.case([ \
  event.op = 'c', 'MERGE (s:Student{pg_id: event.after.id, passbook_number: event.after.passbook_number}) MERGE (g:Group{pg_id: event.after.group_id}) MERGE (s)-[:STUDY_IN]->(g)', \
  event.op = 'd', 'MATCH (s:Student {pg_id: event.before.id}) DETACH DELETE s', \
  event.op = 'u', 'MATCH (s:Student{pg_id: event.before.id}) MATCH (g:Group{pg_id: event.before.group_id}) MATCH (s)-[r:STUDY_IN]->(g) DELETE r WITH * MATCH (ss:Student{pg_id: event.before.id}) MATCH (gg:Group{pg_id: event.after.group_id}) MERGE (ss)-[:STUDY_IN]->(gg)' \
], '', {event: event}) YIELD value as student RETURN student

neo4j.topic.cypher.pg.public.groups: CALL apoc.do.case([ \
  event.op = 'c', 'MERGE (g:Group{pg_id: event.after.id, name: event.after.number}) MERGE (s:Speciality{pg_id: event.after.speciality_id}) MERGE (g)-[:LEARNS]->(s)', \
  ## TODO: дописать
  event.op = 'd', 'MATCH (g:Group{id: event.before.name}) DETACH DELETE g', \
  event.op = 'u', 'MATCH (g:Group{id: event.before.name}) MATCH (s:Speciality{id: event.before.speciality_id}) MATCH (g)-[r:MEMBER_OF]->(s) DELETE r WITH * MATCH (gg:Group{id: event.before.name}) MATCH (ss:Speciality{id: event.after.speciality_id}) MATCH (gg)-[:MEMBER_OF]->(ss)' \
], '', {event: event}) YIELD value as group RETURN group 
# neo4j.topic.cypher.postgres.public.courses: CALL apoc.do.case([ \
#   event.op = 'c', 'MERGE (c:Course{id: event.after.id}) MERGE (d:Department{id: event.after.department_id}) MERGE (c)-[:IS_TAUGHT_BY]->(d)', \
#   event.op = 'd', 'MATCH (c:Course{id: event.before.id}) DETACH DELETE c', \
#   event.op = 'u', 'MATCH (c:Course{id: event.before.id}) MATCH (d:Department{id: event.before.department_id}) MATCH (c)-[r:IS_TAUGHT_BY]->(d) DELETE r WITH * MATCH (cc:Course{id: event.before.id}) MATCH (dd:Department{id: event.after.department_id}) CREATE (cc)-[:IS_TAUGHT_BY]->(dd) ' \
# ], '', {event: event}) YIELD value as course RETURN course
# neo4j.topic.cypher.postgres.public.lessons: CALL apoc.do.case([ \
#   event.op = 'c', 'MERGE (l:Lesson{id: event.after.id}) MERGE (c:Course{id: event.after.course_id}) MERGE (l)-[:PART_OF]->(c)', \
#   event.op = 'd', 'MATCH (l:Lesson{id: event.before.id}) DETACH DELETE l', \
#   event.op = 'u', 'MATCH (l:Lesson{id: event.before.id}) MATCH (c:Course{id: event.before.course_id}) MATCH (l)-[:PART_OF]->(c) DELETE r WITH * MATCH (ll:Lesson{id: event.before.id}) MATCH (cc:Course{id: event.after.course_id}) CREATE (ll)-[:PART_OF]->(cc)' \
# ], '', {event: event}) YIELD value as lesson RETURN lesson
# neo4j.topic.cypher.postgres.public.specialities: CALL apoc.do.case([ \
#   event.op = 'c', 'MERGE (s:Speciality{id: event.after.id}) MERGE (d:Department{id: event.after.department_id}) MERGE (s)-[:BELONGS_TO]->(d)', \
#   event.op = 'd', 'MATCH (s:Speciality{id: event.before.id}) DETACH DELETE s', \
#   event.op = 'u', 'MATCH (s:Speciality{id: event.before.id}) MATCH (d:Department{id: event.after.department_id}) MATCH (s)-[:BELONGS_TO]->(d) DELETE r WITH * MATCH (ss:Speciality{id: event.before.id}) MATCH (dd:Department{id: event.after.department_id}) CREATE (ss)-[:BELONGS_TO]->(dd)' \
# ], '', {event: event}) YIELD value as speciality RETURN speciality
# neo4j.topic.cypher.postgres.public.departments: CALL apoc.do.case([ \
#   event.op = 'c', 'MERGE (d:Department{id: event.after.id})', \
#   event.op = 'd', 'MATCH (d:Department{id: event.before.id}) DETACH DELETE d' \
# ], '', {event: event}) YIELD value as department RETURN department
