name: Neo4jSinkConnector
topics: pg.public.students, pg.public.timetable, pg.public.lectures, pg.public.groups,pg.public.specialities, pg.public.courses, pg.public.departments, pg.public.department_speciality, pg.public.group_course,pg.public.speciality_course
connector.class: streams.kafka.connect.sink.Neo4jSinkConnector
key.converter: org.apache.kafka.connect.storage.StringConverter
value.converter: org.apache.kafka.connect.json.JsonConverter
errors.tolerance: all
errors.log.enable: true
errors.log.include.messages: true
neo4j.batch.parallelize: false
neo4j.server.uri: bolt://neo4j:7687
neo4j.authentication.basic.username: neo4j
neo4j.authentication.basic.password: dr22042002

neo4j.topic.cypher.pg.public.lectures: CALL apoc.do.case([ \
  event.op = 'c', 'MERGE (l:Lecture{pg_id: event.after.id})', \
  event.op = 'd', 'MATCH (l:Lecture{pg_id: event.before.id})-[:READS]->(t:Timetable) DETACH DELETE l, t' \
], '', {event: event}) YIELD value as lecture RETURN lecture

#with apoc.date.format(1682912400000000/1000, "ms", 'YYYY-MM-dd\'T\'HH:mm:ss\'Z\'') as d return d;
neo4j.topic.cypher.pg.public.timetable: CALL apoc.do.case([ \
  event.op = 'c', "MERGE(g:Group{pg_id: event.after.group_id}) MERGE (l:Lecture{pg_id: event.after.lecture_id}) MERGE (t:Timetable{pg_id: event.after.id, group_name: g.name, date: replace(apoc.date.format(event.after.date/1000, 'ms', 'YYYY-MM-dd HH:mm:ss'), ' ', 'T') + 'Z', pg_lecture_id: event.after.lecture_id}) MERGE (l)-[:READS]->(t) MERGE (g)-[:VISITS]->(t)", \
  event.op = "d", "MATCH (t:Timetable{pg_id: event.before.id}) DETACH DELETE t", \
  event.op = "u", "MATCH (tt:Timetable{pg_id: event.before.id}) DETACH DELETE tt WITH * MERGE(g:Group{pg_id: event.after.group_id}) MERGE (l:Lecture{pg_id: event.after.lecture_id}) MERGE (t:Timetable{pg_id: event.after.id, group_name: g.name, date: replace(apoc.date.format(event.after.date/1000, 'ms', 'YYYY-MM-dd HH:mm:ss'), ' ', 'T') + 'Z', pg_lecture_id: event.after.lecture_id}) MERGE (l)-[:READS]->(t) MERGE (g)-[:VISITS]->(t)" \
], '', {event: event}) YIELD value as timetable RETURN timetable



neo4j.topic.cypher.pg.public.students: CALL apoc.do.case([ \
  event.op = 'c', 'MERGE (s:Student{pg_id: event.after.id, passbook_number: event.after.passbook_number}) MERGE (g:Group{pg_id: event.after.group_id}) MERGE (s)-[:STUDY_IN]->(g)', \
  event.op = 'd', 'MATCH (s:Student {pg_id: event.before.id}) DETACH DELETE s', \
  event.op = 'u', 'MATCH (st:Student{pg_id: event.before.id}) DETACH DELETE st WITH * MERGE (s:Student{pg_id: event.after.id, passbook_number: event.after.passbook_number}) MERGE (g:Group{pg_id: event.after.group_id}) MERGE (s)-[:STUDY_IN]->(g)' \
], '', {event: event}) YIELD value as student RETURN student



neo4j.topic.cypher.pg.public.groups: CALL apoc.do.case([ \
  event.op = 'c', 'MERGE (g:Group{pg_id: event.after.id, name: event.after.number})', \
  event.op = 'd', 'MATCH (g:Group{pg_id: event.before.id}) DETACH DELETE g', \
  event.op = 'u', 'MATCH (g:Group{pg_id: event.before.id}) SET g.name=event.after.number' \
], '', {event: event}) YIELD value as group RETURN group


neo4j.topic.cypher.pg.public.courses: CALL apoc.do.case([ \
  event.op = 'c', 'MERGE (c:Course{pg_id: event.after.id, title: event.after.title})', \
  event.op = 'd', 'MATCH (c:Course{pg_id: event.before.id}) DETACH DELETE c', \
  event.op = 'u', 'MATCH (c:Course{pg_id: event.before.id}) SET c.title=event.after.title' \
], '', {event: event}) YIELD value as course RETURN course


neo4j.topic.cypher.pg.public.departments: CALL apoc.do.case([ \
  event.op = 'c', 'MERGE (d:Department{pg_id: event.after.id, name: event.after.title})', \
  event.op = 'd', 'MATCH (d:Department{pg_id: event.before.id}) DETACH DELETE d', \
  event.op = 'u', 'MATCH (d:Department{pg_id: event.before.id}) SET d.name=event.after.title' \
], '', {event: event}) YIELD value as department RETURN department

neo4j.topic.cypher.pg.public.specialities: CALL apoc.do.case([ \
  event.op = 'c', 'MERGE (s:Speciality{pg_id: event.after.id, code: event.after.code})', \
  event.op = 'd', 'MATCH (s:Speciality{pg_id: event.before.id}) DETACH DELETE s', \
  event.op = 'u', 'MATCH (s:Speciality{pg_id: event.before.id}) SET s.code=event.after.code' \
], '', {event: event}) YIELD value as speciality RETURN speciality

neo4j.topic.cypher.pg.public.speciality_course: CALL apoc.do.case([ \
  event.op = 'c', 'MATCH (s:Speciality{pg_id: event.after.speciality_id}), (c:Course{pg_id: event.after.course_id}) MERGE (s)-[:TEACHS]->(c)', \
  event.op = 'd', 'MATCH (s:Speciality{pg_id: event.before.speciality_id})-[r:TEACHS]->(c:Course{pg_id: event.before.course_id}) DELETE r', \
  event.op = 'u', 'MATCH (s:Speciality{pg_id: event.before.speciality_id}) MATCH (c:Course{pg_id: event.before.course_id}) MATCH (s)-[r:TEACHS]->(c) DELETE r WITH * MATCH (ss:Speciality{pg_id: event.before.speciality_id}) MATCH (cc:Course{pg_id: event.after.course_id}) MERGE (ss)-[:TEACHS]->(cc)' \
], '', {event: event}) YIELD value as spec_crs RETURN spec_crs


neo4j.topic.cypher.pg.public.department_speciality: CALL apoc.do.case([ \
  event.op = 'c', 'MATCH (s:Speciality{pg_id: event.after.speciality_id}), (d:Department{pg_id: event.after.department_id}) MERGE (d)-[:PRODUCES]->(s)', \
  event.op = 'd', 'MATCH (d:Department{pg_id: event.before.department_id})-[r:PRODUCES]->(s:Speciality{pg_id: event.before.speciality_id})  DELETE r', \
  event.op = 'u', 'MATCH (d:Department{pg_id: event.before.department_id}) MATCH (s:Speciality{pg_id: event.before.speciality_id}) MATCH (d)-[r:PRODUCES]->(s) DELETE r WITH * MATCH (dd:Department{pg_id: event.before.department_id}) MATCH (ss:Speciality{pg_id: event.after.speciality_id}) MERGE (dd)-[:PRODUCES]->(ss)' \
], '', {event: event}) YIELD value as dep_spec RETURN dep_spec


neo4j.topic.cypher.pg.public.group_course: CALL apoc.do.case([ \
  event.op = 'c', 'MATCH (g:Group{pg_id: event.after.group_id}), (c:Course{pg_id: event.after.course_id}) MERGE (g)-[:LEARNS]->(c)', \
  event.op = 'd', 'MATCH (g:Group{pg_id: event.before.group_id})-[r:LEARNS]->(c:Course{pg_id: event.before.course_id}) DELETE r', \
  event.op = 'u', 'MATCH (g:Group{pg_id: event.before.group_id}) MATCH (c:Course{pg_id: event.before.course_id}) MATCH (g)-[r:LEARNS]->(c) DELETE r WITH * MATCH (gg:Group{pg_id: event.before.group_id}) MATCH (cc:Course{pg_id: event.after.course_id}) MERGE (gg)-[:LEARNS]->(cc)' \
], '', {event: event}) YIELD value as grp_crs RETURN grp_crs


neo4j.topic.cypher.pg.public.speciality_course: CALL apoc.do.case([ \
  event.op = 'c', 'MATCH (s:Speciality{pg_id: event.after.speciality_id}), (c:Course{pg_id: event.after.course_id}) MERGE (s)-[:TEACHS]->(c)', \
  event.op = 'd', 'MATCH (s:Speciality{pg_id: event.before.speciality_id})-[r:TEACHS]->(c:Course{pg_id: event.before.course_id}) DELETE r', \
  event.op = 'u', 'MATCH (s:Speciality{pg_id: event.before.speciality_id}) MATCH (c:Course{pg_id: event.before.course_id}) MATCH (s)-[r:TEACHS]->(c) DELETE r WITH * MATCH (ss:Speciality{pg_id: event.before.speciality_id}) MATCH (cc:Course{pg_id: event.after.course_id}) MERGE (ss)-[:TEACHS]->(cc)' \
], '', {event: event}) YIELD value as spec_crs RETURN spec_crs
